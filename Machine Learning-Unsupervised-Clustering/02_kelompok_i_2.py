# -*- coding: utf-8 -*-
"""02-Kelompok I-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ttCNt-AgUsUtu6Wv-IyxBVbuOlurSO4g

# Assignment Chapter 2 - MACHINE LEARNING [Case #2]
Startup Campus, Indonesia - `Artificial Intelligence (AI)` (Batch 7)
* Dataset: cluster_s1
* Libraries: Pandas, Numpy, Scikit-learn, Matplotlib, Seaborn
* Objective: Data Segmentation with KMeans Clustering

`PERSYARATAN` Semua modul (termasuk versi yang sesuai) sudah di-install dengan benar.
<br>`CARA PENGERJAAN` Lengkapi baris kode yang ditandai dengan **#TODO**.
<br>`TARGET PORTFOLIO` Peserta mampu membandingkan akurasi klasifikasi dari berbagai model *supervised learning*.

### Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import cluster
from sklearn.metrics import silhouette_score

"""### Read Dataset"""

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/cluster_s1.csv')
data = data.drop('no', axis = 1)
data.head()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
ax1 = data.plot.scatter(x='x', y='y', c='DarkBlue')

"""### Data Segmentation (Clustering)"""

# TODO: Lakukan pencarian jumlah cluster terbaik berdasarkan data diatas
from sklearn.cluster import KMeans

values = []

for k in range(1, 10):
    model = KMeans(n_clusters=k, random_state=10)
    model.fit(data)
    values.append(model.inertia_)

# Simpan hasil ke dalam DataFrame
el = pd.DataFrame({"Inertia" : values}, index=[i for i in range(1,10)])

# Plot elbow
el.plot(kind="line")
plt.ylabel("value")
plt.xlabel("Number of cluster")
plt.title("Elbow Method for KMeans")
plt.show()

values = []

for k in range(11, 20):
    model = KMeans(n_clusters=k, random_state=10)
    model.fit(data)
    values.append(model.inertia_)

# Simpan hasil ke dalam DataFrame
el = pd.DataFrame({"Inertia" : values}, index=[i for i in range(11,20)])

# Plot elbow
el.plot(kind="line")
plt.ylabel("value")
plt.xlabel("Number of cluster")
plt.title("Elbow Method for KMeans")
plt.show()

# TODO: Lakukan pemodelan dengan KMeans
kmeans = cluster.KMeans(n_clusters=15, random_state=42)
kmeans.fit(data)
label = kmeans.labels_

score = silhouette_score(data, label)
print("silhouette score={:.5f}".format(score))

"""### Visualization: Cluster Result"""

# TODO: Masukkan label hasil clustering ke dalam DataFrame

result = data.copy()
result['cluster'] = kmeans.predict(data)
result.head()

# TODO: Plot data hasil clustering dengan Seaborn
data["cluster"] = kmeans.predict(data)
sns.relplot(x="x", y="y",
            hue="cluster", data=data, palette="tab10")

"""### Scoring
Total `#TODO` = 4
<br>Checklist:

- [ ] Lakukan pencarian jumlah cluster terbaik berdasarkan data diatas
- [ ] Lakukan pemodelan dengan KMeans
- [ ] Masukkan label hasil clustering ke dalam DataFrame
- [ ] Plot data hasil clustering dengan Seaborn

### Additional readings
- N/A

### Copyright Â© 2024 Startup Campus, Indonesia
* You may **NOT** use this file except there is written permission from PT. Kampus Merdeka Belajar (Startup Campus).
* Please address your questions to mentors.
"""